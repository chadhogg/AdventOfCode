package aoc2020.hoggchad.day14;

import java.util.List;
import java.util.ArrayList;
import java.util.Stack;

/**
 * An array of bits (characters '0' or '1').
 * 
 * @author Chad Hogg
 */
public class BitArray {
	
	/** The length of the array. */
	public static final int LENGTH = 36;

	/** The array itself. */
	private char[] array;
	
	/**
	 * Constructs a bit array.
	 * 
	 * @param num The number that should be stored as an array of bits.
	 */
	public BitArray(long num) {
		array = new char[LENGTH];
		for(int index = LENGTH - 1; index >= 0; index--) {
			if(num % 2 == 0) {
				array[index] = '0';
			}
			else {
				array[index] = '1';
			}
			num = num / 2;
		}
	}
	
	/**
	 * Applies a bitmask to the bit array, overwriting any bits that are not 'X' in the mask.
	 * 
	 * @param mask The bitmask to apply.
	 */
	public void applyMask(char[] mask) {
		for(int index = 0; index < LENGTH; index++) {
			if(mask[index] == '0') {
				array[index] = '0';
			}
			else if(mask[index] == '1') {
				array[index] = '1';
			}
		}
	}
	
	/**
	 * Applies a bizarre interpretation of a bitmask to the bit array.
	 * Values that are 0 in the bitmask are unaffected, those with 1s cause a 1 to be used, 
	 *   and those with Xs act as a wildcard replacing the value with both 0 and 1.
	 * 
	 * @param mask The bitmask to apply.
	 * @return A set of values generated by applying the bitmask.
	 */
	public List<Long> applyMask2(char[] mask) {
		List<Long> values = new ArrayList<>();
		Stack<List<Character>> unfinished = new Stack<>();
		unfinished.add(new ArrayList<>());
		while(!unfinished.isEmpty()) {
			List<Character> current = unfinished.pop();
			if(current.size() == LENGTH) {
				values.add(arrayToValue(listToArray(current)));
			}
			else {
				if(mask[current.size()] == '0') {
					current.add(array[current.size()]);
					unfinished.add(current);
				}
				else if(mask[current.size()] == '1') {
					current.add('1');
					unfinished.add(current);
				}
				else if(mask[current.size()] == 'X') {
					List<Character> zero = new ArrayList<>(current);
					zero.add('0');
					unfinished.add(zero);
					List<Character> one = new ArrayList<>(current);
					one.add('1');
					unfinished.add(one);
				}
				else {
					throw new IllegalStateException("Unexpected character: " + mask[current.size()]);
				}
			}
		}
		return values;
	}

	/**
	 * Converts a List<Character> to char[].
	 * 
	 * @param list The list.
	 * @return It as an array.
	 */
	private static char[] listToArray(List<Character> list) {
		char[] array = new char[list.size()];
		for(int index = 0; index < array.length; index++) {
			array[index] = list.get(index);
		}
		return array;
	}
	
	/**
	 * Converts a char[] containing 0s and 1s to a decimal number.
	 * 
	 * @param array The array.
	 * @return The number.
	 */
	private static long arrayToValue(char[] array) {
		long result = 0;
		long power = 1;
		for(int index = LENGTH - 1; index >= 0; index--) {
			if(array[index] == '1') {
				result += power;
			}
			power *= 2;
		}
		return result;		
	}
	
	/**
	 * Gets the value of this bit array.
	 * 
	 * @return The decimal value this bit array represents.
	 */
	public long getValue() {
		return arrayToValue(array);
	}
}
